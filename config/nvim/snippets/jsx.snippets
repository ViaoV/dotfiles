snippet cmp  A standard react component

	import React from 'react';
	import PropTypes from 'prop-types'

	/**
	 * $1
	 * Class Description
	 *
	 * Usage:
	 *	 <$1 />
	 */

	export default class ${1:MyClass} extends React.Component {

		constructor() {
			super();
			this.state = {};
		}

		render() {
			return (
				<div></div>
			);
		}

	}

	$1.PropTypes = {

	};




snippet cmp A redux connected React component 

	import React from 'react';
	import PropTypes from 'prop-types'

	/**
	 * $1
	 * Class Description
	 *
	 * Usage:
	 *	 <$1 />
	 */

	class ${1:MyClass} extends React.Component {

		constructor() {
			super();
			this.state = {};
		}

		render() {
			return (
				<div></div>
			);
		}

	}

	$1.PropTypes = {

	};

	const mapState = (store) => ({
	});

	const mapProps = {

	};

	export default connect(mapState, mapProps)($1);


snippet cmp Functional React component
	// $1 - ${2:Component Description}
	const ${1:MyComponent} = (props) => (
		<div>
			${0}
		</div>
	);

	$1.PropTypes = {

	};


snippet reducer - Redux reducer boilerplate
	/**
	 * ${3:Reducer description}
	 */


	const initialState = {};

	export function (state = initialState, action)	 {
		switch(action.type) {
			case ${1:ActionName}:
				return {
					${2:action.data}
					...state,	
				};
			default:
				return state;
		}
	}

snippet dprops Deconstruct props
	const { ${1} } = this.props;

snippet cmptest Component test boilerplate

	import React from 'react';
	import { shallow } from 'enzyme';
	import ${1:MyComponent} from '${2:ComponentPath}';


	const props = {
		${0}
	};

	const component = shallow(
		<$1 { ...props } />
	);


	describe('<$1 />', () => {
		it('renders <$1>', () => {
			expect(
				component.find('$1').node
			).toBeDefined();
		});
	});

snippet action Redux action creator
	export const ${1:actionName} = (dispatch) => (${2:}) => {
		return new Promise((resolve, reject) => {
			${0}	
		});
	};

